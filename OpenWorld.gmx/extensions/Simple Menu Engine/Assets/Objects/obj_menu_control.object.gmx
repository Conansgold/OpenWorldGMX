<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///README

/*

This object does all the computing for the menu. In the create event it selects the nearest
button as the default button.

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONFIG / Search for the nearest button, that button will be selected
//Select nearest button
self.selected = obj_button.id;

//You can add new sounds to play a random sound each time something new is chosen.
self.snd[0] = snd_choose1;
//Sound that plays when a button is pressed
self.snd_click = snd_confirm;

audio_sound_gain(snd_choose1,0.4,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Controls</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///KEYBOARD OR GAMEPAD CONTROLS

//When these variables are true the specified action will happen. Replace it with your way of navigating through the menus
var v_enter = (keyboard_check_pressed(vk_enter) or gamepad_button_check_pressed(0,gp_face1));
var v_up = (keyboard_check_pressed(vk_up) or gamepad_button_check_pressed(0,gp_padu));
var v_down = (keyboard_check_pressed(vk_down) or gamepad_button_check_pressed(0,gp_padd));
var v_left = (keyboard_check_pressed(vk_left) or gamepad_button_check_pressed(0,gp_padl));
var v_right = (keyboard_check_pressed(vk_right) or gamepad_button_check_pressed(0,gp_padr));

//CHECK IF PRESSED

if (v_enter) {
    var snd_click = self.snd_click;
    with self.selected {
        audio_play_sound(snd_click,0,0);
        event_user(7);
    }
}

//CHECK IF OTHER BUTTON SELECTED

var new_name = "";

if (v_up) {
    with self.selected {new_name = b_up}
}
if (v_down) {
    with self.selected {new_name = b_down}
}
if (v_left) {
    with self.selected {new_name = b_left}
}
if (v_right) {
    with self.selected {new_name = b_right}
}


if (new_name != "") {
    //Select new button
    var new_id = noone;
    with obj_button {
        //Check if this button is the button we look for, if yes get the id
        if (name == new_name) new_id = id
    }
    if (new_id) {
        //If we have a new id, we select the new button
        audio_play_sound(snd[irandom(array_length_1d(snd)-1)],0,0)
        self.selected = new_id;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOUSE CONTROLS
var newid = false;
//If you move the application surface or something you can specify an offset here
//That's also why we use global mouse events
var mousex = mouse_x;
var mousey = mouse_y;

//Check which button the mouse is in
//NOTICE: Currently the origin of the sprites has to be in the center.
with obj_button {
    if (x-sprite_xoffset &lt; mousex &amp;&amp; x+sprite_xoffset &gt; mousex &amp;&amp; 
      y-sprite_yoffset &lt; mousey &amp;&amp; y+sprite_yoffset &gt; mousey) {
        newid = id;
    }
}

//If the mouse is over a new one:
//Select it!
if (newid &amp;&amp; self.selected != newid) {
    audio_play_sound(snd[floor(irandom(array_length_1d(snd)-1))],0,0)
    self.selected = newid;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make sure all buttons have the right attributes

var selected = self.selected
with obj_button {
    //Selected
    if (selected == self.id) {
        //All even numbers will be made 1 higher
        //image_index 0 -&gt; image_index 1
        //image_index 2 -&gt; image_index 3
        //...
        if (image_index mod 2 == 0 or image_index == 0)
        {
            image_index += 1;
        }
        //if it is already uneven we don't have to do anything
    }
    //Not selected
    else {
        //All uneven numbers will be made 1 lower
        if (image_index mod 2 != 0)
        {
            image_index -= 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse activation of buttons

var newid = false;
//If you move the application surface or something you can specify an offset here
//That's also why we use global mouse events
var mousex = mouse_x;
var mousey = mouse_y;

//Check which button the mouse is in
with obj_button {
    if (-sprite_xoffset &lt; mousex &amp;&amp; x+sprite_xoffset &gt; mousex &amp;&amp; 
      y-sprite_yoffset &lt; mousey &amp;&amp; y+sprite_yoffset &gt; mousey) {
        newid = id;
    }
}

//if it's the same as the selected button: Press it
if (newid &amp;&amp; self.selected == newid) {
    var snd_click = self.snd_click;
    with self.selected {
        audio_play_sound(snd_click,0,0);
        event_user(7);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
